{"version":3,"sources":["components/UsersList.js","components/ButtonFetchUsers.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","props","users","map","user","key","login","uuid","src","picture","large","alt","name","title","first","last","email","phone","location","state","className","ButtonFetchUsers","onClick","click","API","App","handleDataFetch","fetch","then","response","ok","Error","status","json","data","results","setState","prevState","concat","catch","error","console","log","this","length","reverse","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAgBeA,G,YAbG,SAAAC,GAChB,IAAMC,EAAQD,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OAChC,wBAAIC,IAAKD,EAAKE,MAAMC,MAClB,yBAAKC,IAAKJ,EAAKK,QAAQC,MAAOC,IAAKP,EAAKK,QAAQC,QAChD,sCAAQN,EAAKQ,KAAKC,MAAlB,YAA2BT,EAAKQ,KAAKE,MAArC,YAA8CV,EAAKQ,KAAKG,OACxD,2BAAIX,EAAKY,OACT,2BAAIZ,EAAKa,OACT,2BAAIb,EAAKc,SAASC,WAGtB,OAAO,wBAAIC,UAAU,aAAalB,KCFrBmB,G,MARU,SAAApB,GACvB,OACE,4BAAQmB,UAAU,aAAaE,QAASrB,EAAMsB,OAA9C,eCAEC,EAAM,uCAoCGC,E,2MAjCbN,MAAQ,CACNjB,MAAO,I,EAGTwB,gBAAkB,WAChBC,MAAMH,GACHI,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAMF,EAASG,WAEtBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASI,UAC1BL,MAAK,SAAAM,GACJ,IAAM9B,EAAO8B,EAAKC,QAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BnC,MAAOmC,EAAUnC,MAAMoC,OAAOlC,UAGjCmC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,wEAI9B,IAAMtC,EAAQyC,KAAKxB,MAAMjB,MACzB,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CAAkBG,MAAOoB,KAAKjB,kBAC7BxB,EAAM0C,OAAS,EAAI,kBAAC,EAAD,CAAW1C,MAAOA,EAAM2C,YAAgB3C,O,GA5BlD4C,aCKEC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.c9145af3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./UsersList.css\";\r\n\r\nconst UsersList = props => {\r\n  const users = props.users.map(user => (\r\n    <li key={user.login.uuid}>\r\n      <img src={user.picture.large} alt={user.picture.large} />\r\n      <h4>{`${user.name.title} ${user.name.first} ${user.name.last}`}</h4>\r\n      <p>{user.email}</p>\r\n      <p>{user.phone}</p>\r\n      <p>{user.location.state}</p>\r\n    </li>\r\n  ));\r\n  return <ul className=\"usersList\">{users}</ul>;\r\n};\r\n\r\nexport default UsersList;\r\n","import React from \"react\";\r\nimport \"./ButtonFetchUsers.css\";\r\n\r\nconst ButtonFetchUsers = props => {\r\n  return (\r\n    <button className=\"buttonShow\" onClick={props.click}>\r\n      Show user\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonFetchUsers;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport UsersList from \"./components/UsersList\";\nimport ButtonFetchUsres from \"./components/ButtonFetchUsers\";\n\nconst API = \"https://randomuser.me/api/?results=1\";\n\nclass App extends Component {\n  state = {\n    users: []\n  };\n\n  handleDataFetch = () => {\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(response.status);\n      })\n      .then(response => response.json())\n      .then(data => {\n        const user = data.results;\n        this.setState(prevState => ({\n          users: prevState.users.concat(user)\n        }));\n      })\n      .catch(error => console.log(error));\n  };\n\n  render() {\n    const users = this.state.users;\n    return (\n      <div className=\"App\">\n        <ButtonFetchUsres click={this.handleDataFetch} />\n        {users.length > 0 ? <UsersList users={users.reverse()} /> : users}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}